
# resources: -------
# https://github.com/jtdaugherty/tmux-config/blob/master/tmux.conf#L64

# set -g status off

# shell

# as login-shell:  (that .e.g. also reads .profile)
# set-option -g default-shell $DIR_LOCAL/bin/zsh

# as non-login-shell:
set-option -g default-command "zsh"

# keys
set-window-option -g xterm-keys on
set -g xterm-keys on

# vi keybindings for tmux commandline
set-window-option -g mode-keys vi

# vi keybindings for tmux 
set-window-option -g status-keys vi

# vi-copy y copy-pipe 'xsel --clipboard --input'

# 0 too far away
set -g base-index 1
set -g pane-base-index 1

# remap prefix from 'C-b' to 'C-a' ----------------------
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

# copy mode ----------------------------------------------
# bind-key -T copy-mode-vi 'v' send-keys -X begin_selection
# bind-key -T copy-mode-vi 'y' send-keys -X copy-selection

bind -T copy-mode-vi y send -X copy-pipe-and-cancel "xclip -in -selection clipboard"

unbind -T copy-mode-vi v
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi C-v send-keys -X begin-selection

bind -n M-Escape copy-mode

# escape to exit copy-mode, C-g to clear selection
bind -T copy-mode-vi C-g send-keys -X clear-selection
bind -T copy-mode-vi Escape send-keys -X cancel


# split panes using | and ---------------------------------------------------
bind Right 	split-window -h -c '#{pane_current_path}'
bind Left 	split-window -h  -c '#{pane_current_path}'
bind Up 	split-window -v  -c '#{pane_current_path}'
bind Down   split-window -v  -c '#{pane_current_path}'
unbind '"'
unbind %

unbind C-h
unbind C-j
unbind C-k
unbind C-l


# delete panes --------------------------------------------------------------
# -> ctrl-w!


# previous and next window --------------------------------------------------
unbind -n M-PgUp
unbind -n M-PgDn
bind -n M-PgUp previous-window 
bind -n M-PgDn next-window

# create winpdow ------------------------------------------------------------
bind -n M-t new-window -c "#{pane_current_path}"

# kill window/pane ----------------------------------------------------------
# using zsh feature for it, + exit trap for tmux session kill, + zsh hook
# unbind -n C-D
# unbind C-D
# unbind D

# switch panes using Alt-arrow without prefix--------------------------------
#bind -n M-Left select-pane -L
#bind -n M-Right select-pane -R
#bind -n M-Up select-pane -U
#bind -n M-Down select-pane -D
unbind -n M-Left
unbind -n M-Right
unbind -n M-Up
unbind -n M-Down

# tmux / emacs window navigation :)


# switch panes using Alt and number keys -----------------------------------
# bind -n M-1 select-pane -t 0
# bind -n M-2 select-pane -t 1
# bind -n M-3 select-pane -t 2
# bind -n M-4 select-pane -t 3
# bind -n M-5 select-pane -t 4
# bind -n M-6 select-pane -t 5
# bind -n M-7 select-pane -t 6

unbind -n M-1
unbind -n M-2
unbind -n M-3
unbind -n M-4

# tmux-emacs integration:  M-hjkl to navigate panes in emacs and tmux
# bind -n M-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)n?vim(diff)?$|emacs.*$' && tmux send-keys M-h) || tmux select-pane -L"
# bind -n M-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)n?vim(diff)?$|emacs.*$' && tmux send-keys M-j) || tmux select-pane -D"
# bind -n M-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)n?vim(diff)?$|emacs.*$' && tmux send-keys M-k) || tmux select-pane -U"
# bind -n M-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)n?vim(diff)?$|emacs.*$' && tmux send-keys M-l) || tmux select-pane -R"

bind C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)n?vim(diff)?$|emacs.*$' && tmux send-keys M-KP1) || tmux split-window -bh -c '#{pane_current_path}'"
bind C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)n?vim(diff)?$|emacs.*$' && tmux send-keys M-KP2) || tmux split-window -h  -c '#{pane_current_path}'"
bind C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)n?vim(diff)?$|emacs.*$' && tmux send-keys M-KP3) || tmux split-window -v  -c '#{pane_current_path}'"
bind C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)n?vim(diff)?$|emacs.*$' && tmux send-keys M-KP4) || tmux split-window -bv -c '#{pane_current_path}'"

# bind C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)n?vim(diff)?$|emacs.*$' && tmux send-keys M-KP1) || tmux split-window -bh -c '#{pane_current_path}'"
# bind C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)n?vim(diff)?$|emacs.*$' && tmux send-keys M-KP2) || tmux split-window -h  -c '#{pane_current_path}'"
# bind C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)n?vim(diff)?$|emacs.*$' && tmux send-keys M-KP3) || tmux split-window -v  -c '#{pane_current_path}'"
# bind C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)n?vim(diff)?$|emacs.*$' && tmux send-keys M-KP4) || tmux split-window -bv -c '#{pane_current_path}'"

# bind C-h split-window -bh -c '#{pane_current_path}'
# bind C-l  split-window -h -c '#{pane_current_path}'
# bind C-j  split-window -v -c '#{pane_current_path}'
# bind C-k  split-window -bv -c '#{pane_current_path}'

unbind l


# reload config file (change file location to your the tmux.conf you want to use) ------------------------------------
bind r source-file ~/.tmux.conf


# Enable mouse control (clickable windows, panes, resizable panes) ---------
#set -g mouse-select-window on
#set -g mouse-select-pane on
#set -g mouse-resize-pane on

set -g @scroll-speed-num-lines-per-scroll 10

# Enable mouse mode (tmux 2.1 and above) -----------------------------------
#set -g mouse on


# toggle mouse mode -----------------------------------------
bind m run "\
    tmux show-options -g | grep -q "mouse.*on"; \
    if [ \$? = 0 ]; \
    then  \
        toggle=off;  \
    else  \
        toggle=on;  \
    fi;  \
    tmux display-message \"mouse is now: \$toggle\";  \
    tmux set-option -w mouse \$toggle; \
    tmux set-option -g mouse \$toggle; \
    "
    
set -g mouse on;

# allow renaming of windows from command line
set-option -g allow-rename off

# automatically rename window using
set -g automatic-rename on

set -sg escape-time 0
set -g assume-paste-time 0

######################
### DESIGN CHANGES ###
######################

# # panes
# set -g pane-border-fg white
# set -g pane-border-style fg=magenta
# set -g pane-active-border-style fg=magenta
# set -g pane-active-border-style bg=blue

## Status bar design
# status line 
# set -g status utf8 on
set -g status-justify left
set -g status-bg default            # transparency here?
set -g status-fg colour12
set -g status-interval 2

#window mode
setw -g mode-bg colour6
setw -g mode-fg colour0

# window status
setw -g window-status-format " #F#I:#W#F "
# setw -g window-status-current-format " #F#I:#W#F "
# setw -g window-status-format "#[fg=magenta]#[bg=black] #I #[bg=cyan]#[fg=colour8] #W "
# setw -g window-status-current-format "#[bg=brightmagenta]#[fg=colour8] #I #[fg=colour8]#[bg=colour14] #W "
setw -g window-status-current-bg colour81
setw -g window-status-current-fg colour238

setw -g window-status-current-attr bold # dim?
setw -g window-status-bg colour138
setw -g window-status-fg colour235
setw -g window-status-attr dim  # reverse?

# loud or quiet?
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-option -g bell-action none

# set -g default-terminal "rxvt-unicode-256color"
set -g default-terminal "tmux-256color"

# performance improvements
set -g focus-events off
set-option -s escape-time 10

# background colors
set -g window-style 'bg=colour233'
set -g window-active-style 'bg=colour234'

# The modes {
setw -g clock-mode-colour colour135
setw -g mode-attr bold
setw -g mode-fg colour196
setw -g mode-bg colour238

# }
# The panes {

set -g pane-border-bg "colour233"
set -g pane-border-fg "#303030"
set -g pane-active-border-bg "colour233"
set -g pane-active-border-fg "#303030"   # work: 228? 229? 215? 208?
# }
# The statusbar {

# CLOCK=⌚
# CALENDAR=☼
# MUSIC=♫

# LSEP=
# LSEPE=
# RSEP=
# RSEPE=

# if [ "$WIDTH" -gt "$MEDIUM" ]; then
#   MPD="#[fg=colour252,bg=default,nobold,noitalics,nounderscore]$RSEP#[fg=colour16,bg=colour252,bold,noitalics,nounderscore] $MUSIC $(mpc current)"
#   date_colour='colour252'
# fi

# if [ "$WIDTH" -ge "$SMALL" ]; then
#   UNAME="#[fg=colour252,bg=colour236,nobold,noitalics,nounderscore]$RSEP#[fg=colour16,bg=colour252,bold,noitalics,nounderscore] $(uname -n)"
# fi
# DATE="#[fg=colour236,bg=${date_colour:-default},nobold,noitalics,nounderscore]$RSEP#[fg=colour247,bg=colour236,nobold,noitalics,nounderscore] $CALENDAR $(date +'%D')"
# TIME="#[fg=colour241,bg=colour236,nobold,noitalics,nounderscore]$RSEPE#[fg=colour252,bg=colour236,bold,noitalics,nounderscore] $CLOCK $(date +'%H:%M')"

# echo "$MPD $DATE $TIME $UNAME " | sed 's/ *$/ /g'

# set -g status-position top
set -g status-justify left
set -g status-position top
set -g status-bg colour0
set -g status-fg colour173
set -g status-attr dim

set -g status-left ''
# set -g status-right '#[fg=colour233,bg=colour245,bold] #(/$DIR_SYSTEM/check_new_mail.sh) #[fg=colour233,bg=colour241,bold] %d/%m #[fg=colour233,bg=colour245,bold] %H:%M:%S '
# setenv STATUS_RIGHT_DEFAULT=' #[fg=colour9][#W]  #[fg=colour250][#[fg=colour10]%d.%m.%Y#[fg=colour173] #[fg=colour38]%H:%M#[fg=colour250]]'
# setenv -g STATUS_RIGHT_DEFAULT '#[fg=colour250][#[fg=colour10]%d.%m.%Y#[fg=colour173] #[fg=colour38]%H:%M#[fg=colour250]]'
# set -g status-right $STATUS_RIGHT_DEFAULT
set -g status-right '#[fg=colour250][#[fg=colour10]%d.%m.%Y#[fg=colour173] #[fg=colour38]%H:%M#[fg=colour250]]'
set -g status-right-length 300
set -g status-left-length 50

setw -g window-status-separator " "
setw -g window-status-current-fg colour80
setw -g window-status-current-bg colour236
setw -g window-status-current-attr default
# setw -g window-status-current-format ' #[fg=colour222]#I#[fg=colour9]#F '
# setw -g window-status-current-format '#[bg=#EEAD0E,fg=colour232]  #I#{?window_zoomed_flag,#[fg=colour1]Z, }#[bg=#EEAD0E,fg=colour0,nobold,noitalics,nounderscore,reverse]'
setw -g window-status-current-format '#[bg=colour0,fg=#EEAD0E]#[bg=#EEAD0E,fg=colour232] #I#{?window_zoomed_flag,#[fg=colour1]Z, }#[bg=colour0,fg=#EEAD0E]'
# {?window_flags,#{window_flags},}
setw -g window-status-fg colour138
setw -g window-status-bg colour235
#setw -g window-status-attr
# setw -g window-status-format ' #[fg=colour245]#I#[fg=colour244] '
setw -g window-status-format '#[bg=colour0,fg=colour241]#[fg=#EEAD0E,bg=colour241] #I#{?window_zoomed_flag,#[fg=colour1]Z, }#[bg=colour0,fg=colour241]'

setw -g window-status-bell-attr bold
setw -g window-status-bell-fg colour255
setw -g window-status-bell-bg colour1

# }
# The messages {

# set -g message-attr bold
# set -g message-fg colour232
# set -g message-bg colour3


# # messaging
# set -g message-fg black
# set -g message-bg blue
# set -g message-command-fg blue
# set -g message-command-bg black

set -g message-command-style fg=red,bg=colour0
set -g message-style fg=colour0,bg="#f1e94b"
# set -g message-style fg=white,bg=colour80
# set -g mode-style fg=white,bg=colour80
set -g message-attr reverse

# }

set -g mode-style fg=colour236,bg="#f1e94b"

# -- pane border status (!)
set-option -g pane-border-status off
set-option -g pane-border-format "#[fg=#EEAD0E,bg=colour241] #P: #{pane_current_command} #{pane_index} #{pane_title} "


# hooks
# on entering new pane: check if it is zsh, set cursor according to /tmp/zsh_keymap_PID
set-hook -g window-pane-changed 'run-shell "zsh $DIR_SYSTEM/terminal/tmux_on_pane_left.sh #{pane_tty} #{pane_pid}"'
set-hook -g session-window-changed 'run-shell "zsh $DIR_SYSTEM/terminal/tmux_on_pane_left.sh #{pane_tty} #{pane_pid}"'

set-hook -g alert-bell 'display-message "bell"'

# TODO when closing a pane:  do remove the keymap file (!)

# plugins -------
# run-shell ~/.tmux-yank/yank.tmux

 # List of plugins  (prefix-I to install)
 set -g @tpm_plugins '          \
   tmux-plugins/tpm             \
   tmux-plugins/tmux-copycat   \
   tmux-plugins/tmux-sidebar  \
   tmux-plugins/tmux-yank  \
   tmux-plugins/tmux-sessionist \
 '

set -g @sidebar-tree-command 'tree -C -L 1'

run '$HOME/.tmux/tpm/tpm'

# TODO: some commands only work when run at the end,... dunno why :/
unbind -T prefix M-h

bind -r M-h resize-pane -L 1
bind -r M-j resize-pane -D 1
bind -r M-k resize-pane -U 1
bind -r M-l resize-pane -R 1

# note:   run in current shell's environment
bind -n M-h run "$ZDOTDIR/.zsh/utils/xnav.sh L"
bind -n M-j run "$ZDOTDIR/.zsh/utils/xnav.sh D"
bind -n M-k run "$ZDOTDIR/.zsh/utils/xnav.sh U"
bind -n M-l run "$ZDOTDIR/.zsh/utils/xnav.sh R"

# maximize pane toggle on prefix-y instead of prefix-z
unbind-key y
bind C-y resize-pane -Z
bind y resize-pane -Z

# restart pane  (requires symlink zsh.$HOST in $DIR_SYSTEM)
unbind -n M-r
bind -n M-r run-shell 'CC="#{pane_current_path}"; tmux respawn-pane -k "cd $CC; zsh"'
# bind -n C-r run-shell 'echo "hello?'
